<?php

/**
 * @file
 * ESI cache plugin.  Substitutes esi-tags for a panel-pane's content.
 */

// Plugin definition.
$plugin = array(
  'title' => t("ESI"),
  'description' => t('ESI caching is a proxy-based cache. Panes are replaced by <esi> tags and requested separately by the proxy.'),
  'cache get'   => 'esi_panels_esi_cache_get_cache',
  'cache set'   => 'esi_panels_esi_cache_set_cache',
  'cache clear' => 'esi_panels_esi_cache_clear_cache',
  'settings form' => 'esi_panels_esi_cache_settings_form',
  'settings form submit' => 'esi_panels_esi_cache_settings_form_submit',
  'defaults' => array(
    // // TODO: review settings.
    'ttl'                  => (int) variable_get('esi_panels_esi_default_ttl', ESI_DEFAULT_TTL),
    'granularity'          => 0,
    'esi_override_context' => FALSE,
  ),
);


/**
 * Set cached content.
 */
function esi_panels_esi_cache_set_cache($conf, $content, $display, $args, $contexts, $pane = NULL) {
  if (!$conf['use_object_cache']) {
    return FALSE;
  }

  $cid = esi_panels_esi_cache_get_id($conf, $display, $args, $contexts, $pane);
  cache_set($cid, $content);
}

/**
 * Get cached content.
 */
function esi_panels_esi_cache_get_cache($conf, $display, $args, $contexts, $pane = NULL) {
  if (!$conf['use_object_cache']) {
    return FALSE;
  }
  $cid = esi_panels_esi_cache_get_id($conf, $display, $args, $contexts, $pane);
  $cache = cache_get($cid, 'cache');
  if (!$cache) {
    return FALSE;
  }

  if ((time() - $cache->created) > $conf['esi_ttl']) {
    return FALSE;
  }

  return $cache->data;
}

/**
 * Admin-settings form for configuring the ESI cache on panel panes.
 */
function esi_panels_esi_cache_settings_form($conf, $display, $pid) {
  // Use the TTL from the config if provided, or a suitable default.
  $esi_ttl = isset($conf['esi_ttl']) ? $conf['esi_ttl'] : (int) variable_get('esi_panels_esi_default_ttl', ESI_DEFAULT_TTL);

  $pane = (isset($display->content[$pid])) ? $display->content[$pid] : FALSE;

  // Load up the pane information to examine the context.
  $form['esi_ttl'] = array(
    '#title' => t('Cache maximum age (TTL)'),
    '#type' => 'select',
    '#options' => esi_max_age_options($esi_ttl),
    '#default_value' => $esi_ttl,
    '#description' => t('External page caches (proxy/browser) will not deliver cached paged older than this setting; time to live in short.'),
  );

  // Load up the pane information to examine the context.
  $form['use_object_cache'] = array(
    '#title' => t('Use object caching'),
    '#type' => 'checkbox',
    '#default_value' => !empty($conf['use_object_cache']),
    '#description' => t('Also use object caching for the content of ESI panes. (Be careful - this may cause cache coherency problems.)'),
  );

  $form['override_context'] = array(
    '#title' => t('Override cache context'),
    '#type' => 'fieldset',
    '#description' => t('The context requested by the pane (and provided by the parent panel) will be used by default to create separate versions of the pane for each context.'),
    '#collapsible' => TRUE,
    '#collapsed' => empty($conf['override_context']['esi_override_context']),
  );

  // Describe the current panels context: placeholder if there is no context.
  $form['override_context']['pane_context'] = array(
    '#type' => 'item',
    '#title' => t('Current panels context'),
    '#prefix' => '<div class="current_context">',
    '#suffix' => '</div>',
    '#markup' => t("This pane doesn't use panels context."),
  );

  // If there is context, add to the placeholder.
  if (!empty($pane->configuration['context'])) {
    // The context is a simple identifier - e.g. "argument_entity_id:node_1".
    // The description of this context - e.g. "Node being viewed" - is
    // generated by the task handler.
    $context_id = $pane->configuration['context'];
    $context = $display->context[$context_id];
    $form['override_context']['pane_context']['#markup'] = t($context->identifier);
  }

  $form['override_context']['esi_override_context'] = array(
    '#title' => t('Override cache context'),
    '#type' => 'checkbox',
    '#default_value' => !empty($conf['override_context']['esi_override_context']),
  );

  $form['override_context']['esi_overridden_context__page'] = array(
    '#title' => t('Cache per page'),
    '#description' => t("The contents of this pane changes depending on the page on which it's displayed."),
    '#type' => 'checkbox',
    '#default_value' => !empty($conf['override_context']['esi_overridden_context__page']),

    // @TODO: use states (once control of radios through states is patched).
    // '#states' => array(
    //   'disabled' => array(   // override_context to take.
    //     ':input[name="settings[override_context][esi_override_context]"]' => array('unchecked' => TRUE),
    //   ),
    // ),
  );

  $form['override_context']['esi_overridden_context__user'] = array(
    '#title' => t('User context'),
    '#description' => t("How a user or their roles affect the pane."),
    '#type' => 'radios',
    '#options' => array(
      DRUPAL_CACHE_GLOBAL   => t('Pane is shared by all users'),
      DRUPAL_CACHE_PER_ROLE => t("Pane changes according to the current user's roles"),
      DRUPAL_CACHE_PER_USER => ('Pane changes according to the current user'),
    ),
    '#default_value' => isset($conf['override_context']['esi_overridden_context__user']) ? $conf['override_context']['esi_overridden_context__user'] : DRUPAL_CACHE_PER_ROLE,

    // @TODO: use states (once control of radios through states is patched).
    // '#states' => array(
    //   'disabled' => array(   // override_context to take.
    //     ':input[name="settings[override_context][esi_override_context]"]' => array('unchecked' => TRUE),
    //   ),
    // ),
  );

  return $form;
}

/**
 * Figure out an id for object caching based upon input and settings.
 */
function esi_panels_esi_cache_get_id($conf, $display, $args, $contexts, $pane) {
  $id = 'esi_panels_esi_cache';

  // This is used in case this is an in-code display, which means did will be something like 'new-1'.
  if (isset($display->owner) && isset($display->owner->id)) {
    $id .= ':' . $display->owner->id;
  }
  $id .= ':' . $display->did;

  if ($pane) {
    $id .= ':' . $pane->pid;
  }

  if (user_access('view pane admin links')) {
    $id .= ':admin';
  }

  // @TODO: Fix this to align with how ESI.module works.
  switch ($conf['granularity']) {
    case 'args':
      foreach ($args as $arg) {
        $id .= ':' . $arg;
      }
      break;

    case 'context':
      if (!is_array($contexts)) {
        $contexts = array($contexts);
      }
      foreach ($contexts as $context) {
        if (isset($context->argument)) {
          $id .= ':' . $context->argument;
        }
      }
  }
  if (module_exists('locale')) {
    global $language;
    $id .= ':' . $language->language;
  }

  if (!empty($pane->configuration['use_pager'])) {
    $id .= ':p' . check_plain($_GET['page']);
  }

  return $id;
}
